{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"\n# Coding Resource\n\nWelcome to my coding resource. I place to help me learn and keep track of core web development concepts.\n","n":0.218}}},{"i":2,"$":{"0":{"v":"WordPress","n":1},"1":{"v":"\n## References\n\n### Plugins\n\nSyncing media from production to local <br>\nhttps://github.com/billerickson/BE-Media-from-Production\n\nUsing git with WordPress <br>\nhttps://github.com/afragen/git-updater\n\nMigrating WordPress sites <br>\nhttps://deliciousbrains.com/signin/\n\nManaging redirects <br>\nhttps://redirection.me/\n\n### Guides\n\nInstalling PHP on OSX <br>\nhttps://daily-dev-tips.com/posts/installing-php-on-your-mac/\n\nStarter for Tailwind and WordPress <br>\nhttps://underscoretw.com/\n","n":0.189}}},{"i":3,"$":{"0":{"v":"React","n":1},"1":{"v":"\n## References\n\n- https://alexsidorenko.com/blog/react-prop-drilling-composition/\n- https://streamich.github.io/react-use/?path=/story/components-usekey--demo\n- https://kentcdodds.com/blog/how-to-use-react-context-effectively\n- https://www.npmjs.com/package/@uidotdev/usehooks?ck_subscriber_id=2188261951\n- https://react.gg/visualized?ck_subscriber_id=2188261951#managing-effects\n- https://francoisbest.com/posts/2023/storing-react-state-in-the-url-with-nextjs?ck_subscriber_id=2188261951\n","n":0.354}}},{"i":4,"$":{"0":{"v":"headlessUI","n":1},"1":{"v":"\n## Multiple / Nested Dialogs\n\nWhen working with nested dialogs the dialogs cannot be siblings they need to be nested inside each other to create the correct stacking context, so `esc` can close each modal in order.\n\n- https://github.com/tailwindlabs/headlessui/issues/426#issuecomment-1059185316\n","n":0.164}}},{"i":5,"$":{"0":{"v":"JS","n":1},"1":{"v":"\n## References\n\n- https://exploringjs.com/impatient-js/ch_arrays.html#quickref-arrays\n  -- array specific reference\n- https://alexkondov.com/half-hour-to-learn-js/\n  -- quick reference for programming aspects of JS\n- https://github.com/ryanmcdermott/clean-code-javascript\n  -- best practices for clean code\n- https://vanillajstoolkit.com/reference/\n- https://learnxinyminutes.com/docs/javascript/\n  -- quick reference for programming aspects of JS\n- https://javascript.info/\n  -- in depth guide to JS includes browser, dom etc\n","n":0.151}}},{"i":6,"$":{"0":{"v":"Fetch","n":1},"1":{"v":"\nhttps://codesandbox.io/s/fetch-with-basic-error-handling-n72sp4?file=/src/index.mjs\n\nhttps://dmitripavlutin.com/javascript-fetch-async-await/#3-handling-fetch-errors\n","n":1}}},{"i":7,"$":{"0":{"v":"DOM","n":1},"1":{"v":"\nJavascript DOM methods and properties\n\nDom playground: https://codepen.io/adamjbragg/pen/poGjabO\n\nDOM shopping list example: https://codepen.io/adamjbragg/pen/ZEwBqzQ\nhttps://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents#active_learning_a_dynamic_shopping_list\n","n":0.302}}},{"i":8,"$":{"0":{"v":"textContent","n":1},"1":{"v":"\n`node.textContent` returns all the contents of a node including text, but also script and style tags, hidden divs and white space.\n\n```html\n<h2>Hello World</h2>\n```\n\n```js\nconst h2 = document.querySelector('h2');\nh2.textContent; // Hello World\n```\n\n- **Warning:** Setting textContent on a node removes all of the node's children and replaces them with a single text node with the given string value.\n\n### Differences from `HTMLElement.innerText`\n\n- `textContent` returns every element with in a node, `innerText` is aware of styling and won't return hidden elements.\n- `innerText` triggers a reflow, `textContent` does not.\n\nsee: [[js.dom.innerText]]\n","n":0.11}}},{"i":9,"$":{"0":{"v":"Querying","n":1},"1":{"v":"\nIn modern JS we use `document.querySelector()` and `document.querySelectorall()` to select elements in the dom.\n\n## `document.querySelector()`\n\nReturns the **first** element that matches the given selector(s).\n\n```js\nconst elByClass = document.querySelector('.class');\nconst elById = document.querySelector('#id');\nconst elByTag = document.querySelector('tag'); //('h1')\nconst elByAttr = document.querySelector('[attr]'); //('[data-attr]')\n```\n\n## `document.querySelectorAll()`\n\nReturns a **node list** of all elements that match the given selector(s).\n\n```js\nconst elByClass = document.querySelectorAll('.class');\nconst elById = document.querySelectorAll('#id');\nconst elByTag = document.querySelectorAll('tag'); //('h1')\nconst elByAttr = document.querySelectorAll('[attr]'); //('[data-attr]')\n```\n\n## Accessing the matches from `document.querySelectorAll()`\n\nBecause `document.querySelectorAll()` returns a nodeList we can access the matches with a forEach loop.\n\n```js\nconst elements = document.querySelectorAll('.class');\n\n// loop over the element with forEach()\nelement.forEach((el) => {\n  console.log(el); // do something with the element\n});\n```\n\nNodeLists can be converted to Arrays, see: [[js.dom.nodeList]] for more information.\n","n":0.096}}},{"i":10,"$":{"0":{"v":"nodeList","n":1},"1":{"v":"\n- NodeLists are a static collection, example: If you add a `<li>` element to a list in the DOM, the list in NodeList will not change.\n- A NodeList is not an array but can be looped over with forEach()\n- A NodeList can be converted to an array with Array.from see: [[js.array.from]]\n- A NodeList can be converted to an array with the spread operator `[...nodeList]`\n- `document.querySelectorAll()` and `childNodes()` return a NodeList\n\nsee: [[js.dom.querying]] for more info on `document.querySelectorAll()`\n","n":0.115}}},{"i":11,"$":{"0":{"v":"insertAdjacentElement","n":1},"1":{"v":"\n`Element.insertAdjacentElement()` is a method that inserts an element at a defined position relative to the element invoked from.\n\n`insertAdjacentElement(position, element)`\n\n- there are four positions\n  -- `beforebegin`: before the `targetElement`\n  -- `afterbegin`: inside the `targetElement`\n  -- `beforeend`: just inside the `targetElement`\n  -- `afterend`: after the `targetElement`\n\n```js\nconst targetEl = documentQuerySelector('.someClass');\n\nconst myEl = document.createElement('p');\nmyEl.innerText = 'This is my element';\n\ntargetEl.insertAdjacentElement('afterbegin', myEl);\n```\n","n":0.134}}},{"i":12,"$":{"0":{"v":"innerText","n":1},"1":{"v":"\nHTMLElement.innerText is a property that returns the human readable text from a node and its descendants.\n\n### Differences from `node.textContent`\n\n- `innerText` is aware of styling and won't return hidden elements.\n- `innerText` triggers a reflow, `textContent` does not.\n- `textContent` returns every element with in a node including script and style tags, hidden divs and white space.\n","n":0.136}}},{"i":13,"$":{"0":{"v":"innerHTML","n":1}}},{"i":14,"$":{"0":{"v":"Creating","n":1},"1":{"v":"\n## Selecting\n\n[[js.dom.querying]]\n\n## Create a dom node\n\n[[js.dom.createElement]]\n\n## Working with Classes\n\n[[js.dom.classList]]\n\n## Working with attributes\n\n### Custom data attributes\n\n- when setting custom attributes use `data-*`\n- set a data attribute value:\n- The in operator can check if a given attribute exists: `'keyname' in element.dataset`\n- To remove an attribute, you can use the delete operator: `delete element.dataset.keyname`\n\n```html\n<p data-user=\"Adam Bragg\">Adam</p>\n```\n\n```js\nconst element = document.querySelector('p');\nelement.dataset.user; // Adam Bragg\n```\n\n```js\nelement.dataset.food = 'pizza'; // create new attribute and set data attribute\n// <p data-user=\"Adam Bragg\" data-food=\"pizza\">Adam</p>\n```\n\n### Working with attributes\n\n-\n\n## Traversing through the DOM\n","n":0.112}}},{"i":15,"$":{"0":{"v":"createElement","n":1}}},{"i":16,"$":{"0":{"v":"classList","n":1},"1":{"v":"\n`Element.classList` is a property that returns a live collection of the classes on an element.\n\nThere are methods to add, remove, replace, toggle and check for the classes on an element;\n\n```js\nconst element = document.createElement('div');\n\nelement.classList.add('class'); // add a class of 'class'\nelement.classList.add('another-class'); // add class of 'another-class'\n\nelement.classList.remove('class'); // remove class of 'class'\nelement.classList.replace('another-class', 'new-class'); // replace class of 'another-class' with 'new-class'\nelement.classList.toggle('class'); // toggle class of 'class'\nelement.classList.contains('new-class'); // check if element has class of 'new-class'\n\n// create a toggle function;\nfunction toggleClass(element, className) {\n  if (!element || !className) return;\n  element.classList.toggle(className);\n}\n```\n","n":0.11}}},{"i":17,"$":{"0":{"v":"Async","n":1},"1":{"v":"\nhttps://www.youtube.com/watch?v=wsoQ-fgaoyQ\nhttps://maximorlov.com/linting-rules-for-asynchronous-code-in-javascript/\n","n":1}}},{"i":18,"$":{"0":{"v":"Array","n":1},"1":{"v":"\nJavascript array methods and properties\n","n":0.447}}},{"i":19,"$":{"0":{"v":"map","n":1}}},{"i":20,"$":{"0":{"v":"from","n":1},"1":{"v":"\n- Array.from() method is a static method in JavaScript\n- it creates a new array instance from an iterable or array-like object\n- The iterable or array-like object can be any object that has a length property and can be iterated over using a forâ€¦of loop or other iterable method.\n- The method returns a **shallow copy of the original object**\n- **any changes made to the original object will not affect the new array instance created byï»¿Array.from()**\n\n```js\n// Create an array based on a property of DOM Elements\n\nconst images = document.querySelectorAll('img');\n// returns a NodeList\n\nconst sources = Array.from(images, (image) => image.src);\n\nconst insecureSources = sources.filter((link) => link.startsWith('http://'));\n```\n","n":0.1}}},{"i":21,"$":{"0":{"v":"forEach","n":1}}},{"i":22,"$":{"0":{"v":"CSS","n":1},"1":{"v":"\n## References\n\n- https://fffuel.co/css-selectors/#top-bar\n- https://gradient.style\n- https://ishadeed.com/article/-grid-layout-flexbox-components/\n- https://defensivecss.dev/ -https://csshero.org/mesher/ -https://www.joshwcomeau.com/gradient-generator/ -https://shadows.brumm.af/\n- https://phuoc.ng/collection/css-layout/\n","n":0.316}}},{"i":23,"$":{"0":{"v":"Browsers","n":1},"1":{"v":"\nHow browsers work.\n","n":0.577}}},{"i":24,"$":{"0":{"v":"Repaint","n":1},"1":{"v":"\nA Repaint is when the browser redraws the webpage to show visual updates from a UI change. Usually follows a reflow.\n\nsee: [[browsers.reflow]]\n","n":0.213}}},{"i":25,"$":{"0":{"v":"Reflow","n":1},"1":{"v":"\nA Reflow happens when a browser recalculates the position and geometry of certain parts of a webpage.\n\nA Reflow is often followed by a Repaint.\n\nsee: [[browsers.repaint]];\n","n":0.2}}}]}
